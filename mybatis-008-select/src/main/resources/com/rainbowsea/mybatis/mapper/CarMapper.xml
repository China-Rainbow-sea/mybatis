<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace 一定要是：对应的接口的全限定类名-->
<mapper namespace="com.rainbowsea.mybatis.mapper.CarMapper">


<!--    <select id="selectTotal" resultType="java.lang.Long">-->
    <select id="selectTotal" resultType="Long">
--         select count(具体某个字段的话，是不会记录null值的个数的)
        select count(1) from t_car
    </select>




    <select id="selectAllByMapUnderscoreToCamelCase" resultType="Car">
        SELECT id,
               car_num,
               brand,
               guide_price,
               produce_time,
               car_type
        FROM `t_car`

    </select>


    <!--    1.专门定义一个结果映射，在这个结果映射当中指定数据库表的字段名和Java类的属性名的对应关系
            2.type属性，用来指定POJO类的类名
            3.id属性，指定resultMap的唯一标识，这个id将来要在select标签中使用-->
    <!--    <resultMap id="carResultMap" type="com.rainbowsea.mybatis.pojo.Car">-->
    <!--    也可以用别名-->
    <resultMap id="carResultMap" type="Car">
        <!--        如果数据表中有主键，一般都是有主键的，要不然不符合数据库设计第一范式-->
        <!--        如果有主键，建议这里配置一个id的标签，注意：这不是必须的，但是官方的解释是：这样的配置可以让mybatis 提高效率-->
        <id property="id" column="id"></id>
        <!--        property 后面填写的值是：POJO类的属性名-->
        <!--        column 后面填写数据库表的字段名(用了别名的话，是别名)-->
        <result property="carNum" column="car_num"></result>
        <!--        如果POJO类的属性名和数据库表中查询的字段名是一致的，就不需要配置了-->
        <result property="brand" column="brand"></result>
        <result property="guidePrice" column="guide_price"></result>
        <result property="produceTime" column="produce_time"></result>
        <result property="carType" column="car_type" javaType="String" jdbcType="VARCHAR"></result>
    </resultMap>
    <!--    select标签的resultMap的属性，用来指定使用哪个结果映射，resultMap后面的值是resultMap的id-->
    <select id="selectAllByResultMap" resultMap="carResultMap">
        SELECT id,
               car_num,
               brand,
               guide_price,
               produce_time,
               car_type
        FROM `t_car`
    </select>

    <select id="selectAllRetMap" resultType="Map">
        SELECT id,
               car_num      as carNum,
               brand,
               guide_price  as guidePrice,
               produce_time as produceTime,
               car_type     as carType
        FROM `t_car`
    </select>

    <!--    这个 resultType 不是List 是 map ，注意：除了单个特殊的 Map 集合的话（因为Map当中存在多个元素类型，无法断定用其中的那个存储的），其他的都是数组/集合当中存放的数据的元素类型-->
    <select id="selectAllRetListMap" resultType="Map">
        SELECT id,
               car_num      as carNum,
               brand,
               guide_price  as guidePrice,
               produce_time as produceTime,
               car_type     as carType
        FROM `t_car`
    </select>


    <!--resultType="java.util.Map 有别名 map"-->
    <!--    map当中有两个元素信息，所以你并不能指定Map当中存储的是什么类型，就用 Map集合接受了-->
    <select id="selectByIdRetMap" resultType="Map">
        SELECT id,
               car_num      as carNum,
               brand,
               guide_price  as guidePrice,
               produce_time as produceTime,
               car_type     as carType
        FROM `t_car`
        where id = #{id}
    </select>

    <select id="selectById2" resultType="Car">
        SELECT id,
               car_num      as carNum,
               brand,
               guide_price  as guidePrice,
               produce_time as produceTime,
               car_type     as carType
        FROM `t_car`
        where id = #{id}
    </select>


    <select id="selectByBrandLike" resultType="Car">
        SELECT id,
               car_num      as carNum,
               brand,
               guide_price  as guidePrice,
               produce_time as produceTime,
               car_type     as carType
        FROM t_car
        where brand like "%"#{brand}"%"
    </select>


    <select id="selectAll" resultType="Car">
        SELECT id,
               car_num      as carNum,
               brand,
               guide_price  as guidePrice,
               produce_time as produceTime,
               car_type     as carType
        FROM t_car
    </select>

    <!--	id 要是 namespace 对应接口上的方法名: -->
    <select id="selectById" resultType="Car">
        SELECT id,
               car_num      as carNum,
               brand,
               guide_price  as guidePrice,
               produce_time as produceTime,
               car_type     as carType
        FROM `t_car`
        where id = #{id}
    </select>

</mapper>