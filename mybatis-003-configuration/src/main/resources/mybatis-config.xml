<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--    开启mybatis 对标准日志的实现-->
    <!--    如果导入的第三方框架的日志，没有下面这个 settings 也是可以的-->
        <settings>
            <setting name="logImpl" value="STDOUT_LOGGING"/>
        </settings>
<!--    default 标识默认使用的环境（也就是哪个数据库）-->
<!--    默认环境是什么意思，当你使用mybatis创建sqlSessionFactory 对象的时候，没有指定环境的话，默认使用的就是
这里 default 指定的数据库的环境-->
    <environments default="mybatis">


<!--        其中的一个环境，连接的数据库是 development -->
<!--        一般一个数据库会对应上一个SqlSessionFactory对象-->
<!--        一个环境environment 对对应上一个SqlSessionFactory对象-->
        <environment id="mybatis">
<!--        transactionManager标签
            1.作用：配置事务管理器，指定Mybatis具体使用什么方式去管理事务
            2.type属性有两个值:
                第一个:JDBC: 使用原生的JDBC代码来管理事务
                conn.seAutoCommit(false)
                ...事务
                conn.commit();
                第二个:MANAGED
                    mybatis 不再负责事务的管理，将事务管理交给其它的JEE(JavaEE)容器来管理。
                    例如：spring
                3.大小写无所谓，不区分大小写，但是不能不写其他值，只能是二选一。
                jdbc;managed

             4.在mybatis中提供了一个事务管理器接口：Transaction；org.apache.ibatis.transaction;
                该接口下有两大实现类
                    JdbcTransaction
                    ManagedTransaction
                如果type="JDBC",那么底层会实例化JdbcTransaction对象
                如果type="MANAGED",那么底层会实例化ManagedTransaction对象
-->

            <transactionManager type="JDBC"/>


<!--
            dataSource配置
                1.dataSource被称之为数据源
                2.dataSource作用是什么？为程序员提供Connection对象，（但凡是给程序员提供 Connection连接对的，都叫做数据源）
                3.数据源实际上是一套规范，JDK中有这套规范，javax.sql.DataSource
                4.我们自己也可以编写数据源组件，只要实现javax.sql.DataSource接口就行了，
                实现接口当中所有的方法，这样就有了自己的数据源了。比如你可以写一个属于自己的数据库连接池（数据库连接池就是提供连接对象（Connection）的，
                所以数据库连接池就是一个数据源）
                  <dataSource type="指定数据源的类型其实就是指定使用哪个数据源连接池..."
                常见的数据源组件有哪些呢（常见的数据库连接池有哪些呢）
                    阿里巴巴的德鲁伊数据库连接池（druid）
                    c3p0
                    dbcp
                    ...
               type 属性用来指定数据源的类型，就是指定具体使用什么方式来获取Connection对象
                type的属性有三个值：必须是三选一
                也就是 type="[UNPOOLED|POOLED|JNDI]"）
                UNPOOLED: 不能使用数据库连接池技术，每一次请求过来之后，都是创建新的Connection对象
                POOLED: 使用mybatis 自己实现的数据库连接池
                JNDI: 集成其他第三方的数据库连接池

                连接池优点：每一次获取连接都从池中拿，效率高。
                因为每一次只能从池中拿，所以连接对象的创建数量是可控的。

                JNDI: 是一套规范，谁实现了这套规范呢？大部分的web容器都实现了JNDI规范
                    例如：Tomcat，Jetty，WebLogic，WebSphere，这些服务器（容器）都实现了JNDI规范。
                    JNDI是：Java命名目录接口，Tomcat服务器实现了这个规范。
                    简单的说，就是 Web容器（比如Tomcat）当中上面我们使用了数据库连接池，我们JNDI就只需要
                    获取到Tomcat(这层我们使用的数据库连接池)就可以了，不需要再额外的去，搞个数据库连接池。

            <dataSource type="JNDI">
                <property name="initial_context" value="..."/>
                <property name="data_source" value="..."


-->
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.cj.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/mybatis"/>
                <property name="username" value="root"/>
                <property name="password" value="MySQL123"/>
<!--                提醒：正常使用连接池的话，池中有很多参数是需要设置的，设置好参数，可以让连接池发挥更好的，事半功倍的效果。-->
<!--                具体连接池当中的参数如何配置呢？需要反复的根据当前业务情况进行测试。-->
<!--                默认是10个,最大连接池数-->
                <property name="poolMaximumActiveConnections" value="3"/>

            </dataSource>
        </environment>


<!--这是 mybatis 的另一个环境，也就是连接的数据库是另一个数据库mybatis2-->
        <environment id="mybatis2">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.cj.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/mybatis2"/>
                <property name="username" value="root"/>
                <property name="password" value="MySQL123"/>
                <!--                提醒：正常使用连接池的话，池中有很多参数是需要设置的，设置好参数，可以让连接池发挥更好的，事半功倍的效果。-->
                <!--                具体连接池当中的参数如何配置呢？需要反复的根据当前业务情况进行测试。-->
                <!--                默认是10个,最大连接池数-->
                <!--最大连接数-->
                <property name="poolMaximumActiveConnections" value="1"/>
            </dataSource>
        </environment>
    </environments>
    <mappers>
        <mapper resource="CarMapper.xml"/>
    </mappers>
</configuration>